/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Project_1;
import static spark.Spark.get;
  import static spark.Spark.port;
  import static spark.Spark.post;

  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.Map;

  import spark.ModelAndView;
  import spark.template.mustache.MustacheTemplateEngine;



public class App {
    
    public static int find(int[] arr,int min,int max)throws Exception{
        if(arr==null)
        throw new Exception("Null array!");
        if(min>max)
            throw new Exception("Wrong min and max value!");
        if(arr.length==0)
            throw new Exception("Empty array!");
        int amount=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>=min&&arr[i]<=max)
                amount++;
        }
        return amount;
    }
    

    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Welcome, add \"\\compute\"to URL to go next page ");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);
          
          int[] arrInt= new int[inputList.size()];
          for(int i=0;i<inputList.size();i++)
              arrInt[i]=inputList.get(i);
          
              String input2 = req.queryParams("input2").replaceAll("\\s","");
          int input2AsInt = Integer.parseInt(input2);
          

          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input3AsInt = Integer.parseInt(input3);
          
          Map map=null;
          try{
            int result = App.find(arrInt, input2AsInt,input3AsInt);
            map = new HashMap<String, Integer>();
            map.put("result", result);
          }catch(Exception e){
            map = new HashMap<String, String>();
            map.put("result", e.toString());
          }
          
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }




    public String getGreeting() {
        return "Hello world.";
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
    public static boolean search(ArrayList<Integer> array, int e) {
        System.out.println("inside search");
        if (array == null) return false;
  
        for (int elt : array) {
          if (elt == e) return true;
        }
        return false;
      }
  

}

